steps:
  - script: |
      wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
      sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
      if [ "$(Compiler)" = "GCC" ]; then
        sudo apt-add-repository ppa:ubuntu-toolchain-r/test
      else
        sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
      fi
      sudo apt-get update
      if [ "$(Compiler)" = "GCC" ]; then
        sudo apt-get install cmake gcc-9 g++-9
      else
        sudo apt-get install cmake clang-9
      fi
      
    displayName: Install tools

  - script: |
      mkdir -p ~/bin
      ln -s /usr/bin/cmake ~/bin/cmake
      echo "##vso[task.setvariable variable=PATH]$HOME/bin:${PATH}"
      echo "##vso[task.setvariable variable=VCPKG_ROOT]$(Build.BinariesDirectory)/dependencies/vcpkg"
      echo "##vso[task.setvariable variable=VCPKG_TRIPLET]$(Platform)-linux$(vcpkgTripletSuffix)"
      if [ "$(Compiler)" = "GCC" ]; then
        echo "##vso[task.setvariable variable=CC]gcc-9"
        echo "##vso[task.setvariable variable=CXX]g++-9"
      else
        echo "##vso[task.setvariable variable=CC]clang-9"
        echo "##vso[task.setvariable variable=CXX]clang++-9"
      fi
    displayName: Set environment variables

  - task: CacheBeta@1
    displayName: Cache dependencies
    inputs:
      key: '$(Build.SourcesDirectory)/ci/vcpkg.txt | "$(vcpkgGitRef)" | "$(vcpkgPortsOverlayRef)" | "$(Platform)-$(Agent.OS)$(vcpkgTripletSuffix)" | "$(Compiler)" | "$(revision)"'
      path: '$(Build.BinariesDirectory)/dependencies'
      cacheHitVar: 'dependencyCacheHit'

  - script: |
      if [ "$(vcpkgPortsOverlayRepo)" != "" ]; then
          git clone --depth 1 $(vcpkgPortsOverlayRepo) "$(Build.BinariesDirectory)/dependencies/ports-overlay-repo"
      fi
      mkdir -p "$(Build.BinariesDirectory)/dependencies/ports-overlay-repo/vcpkg/ports"
    displayName: Clone ports overlay repository
    condition: ne(variables.dependencyCacheHit, 'true')

  - task: run-vcpkg@0
    displayName: Run Vcpkg to install dependencies
    inputs:
      vcpkgDirectory: '$(Build.BinariesDirectory)/dependencies/vcpkg'
      vcpkgGitCommitId: '$(vcpkgGitRef)'
      vcpkgTriplet: '$(Platform)-linux$(vcpkgTripletSuffix)'
      vcpkgArguments: '--overlay-ports="$(Build.BinariesDirectory)/dependencies/ports-overlay-repo/vcpkg/ports" --overlay-triplets="$(Build.BinariesDirectory)/dependencies/ports-overlay-repo/vcpkg/triplets" "@$(Build.SourcesDirectory)/ci/vcpkg.txt"'
    condition: ne(variables.dependencyCacheHit, 'true')

  - script: |
      rm -rf "$(Build.BinariesDirectory)/dependencies/vcpkg/buildtrees"
      rm -rf "$(Build.BinariesDirectory)/dependencies/vcpkg/downloads"
      rm -rf "$(Build.BinariesDirectory)/dependencies/vcpkg/packages"
    displayName: Delete temporary files
    condition: ne(variables.dependencyCacheHit, 'true')

  - task: run-cmake@0
    displayName: Build
    inputs:
      cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
      useVcpkgToolchainFile: true
      buildDirectory: '$(Build.BinariesDirectory)/build'
      cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=$(Config) $(cmakeConfigArgs)'
      buildWithCMakeArgs: '-- -j VERBOSE=1'

  - script: |
      ctest -V -T Test
    displayName: Run tests
    workingDirectory: '$(Build.BinariesDirectory)/build'

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '$(Build.BinariesDirectory)/build/Testing/*/Test.xml'
      testRunTitle: '$(Agent.JobName)'
